/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Conduit API
 * Conduit API
 * OpenAPI spec version: 1.0.0
 */
import { customInstance } from '../../mutator/custom-instance';

import type {
  GetArticlesFeedParams,
  GetArticlesParams,
  MultipleArticlesResponse,
  NewArticleRequest,
  SingleArticleResponse,
  UpdateArticleRequest,
} from '../../models';




/**
 * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
 * @summary Get recent articles from users you follow
 */
export const getArticlesFeed = (params?: GetArticlesFeedParams) => {
  return customInstance<MultipleArticlesResponse>({
    url: `/articles/feed`,
    method: 'get',
    params,
  });
};
/**
 * Get most recent articles globally. Use query parameters to filter results. Auth is optional
 * @summary Get recent articles globally
 */
export const getArticles = (params?: GetArticlesParams) => {
  return customInstance<MultipleArticlesResponse>({
    url: `/articles`,
    method: 'get',
    params,
  });
};
/**
 * Create an article. Auth is required
 * @summary Create an article
 */
export const createArticle = (newArticleRequest: NewArticleRequest) => {
  return customInstance<SingleArticleResponse>({
    url: `/articles`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: newArticleRequest,
  });
};
/**
 * Get an article. Auth not required
 * @summary Get an article
 */
export const getArticle = (slug: string) => {
  return customInstance<SingleArticleResponse>({
    url: `/articles/${slug}`,
    method: 'get',
  });
};
/**
 * Update an article. Auth is required
 * @summary Update an article
 */
export const updateArticle = (
  slug: string,
  updateArticleRequest: UpdateArticleRequest
) => {
  return customInstance<SingleArticleResponse>({
    url: `/articles/${slug}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: updateArticleRequest,
  });
};
/**
 * Delete an article. Auth is required
 * @summary Delete an article
 */
export const deleteArticle = (slug: string) => {
  return customInstance<void>({ url: `/articles/${slug}`, method: 'delete' });
};
