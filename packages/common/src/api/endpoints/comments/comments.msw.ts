/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Conduit API
 * Conduit API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  rest
} from 'msw'

export const getGetArticleCommentsMock = () => ({comments: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.datatype.number({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, body: faker.random.word(), author: {username: faker.random.word(), bio: faker.random.word(), image: faker.random.word(), following: faker.datatype.boolean()}}))})

export const getCreateArticleCommentMock = () => ({comment: {id: faker.datatype.number({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, body: faker.random.word(), author: {username: faker.random.word(), bio: faker.random.word(), image: faker.random.word(), following: faker.datatype.boolean()}}})

export const getCommentsMSW = () => [
rest.get('*/articles/:slug/comments', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetArticleCommentsMock()),
        )
      }),rest.post('*/articles/:slug/comments', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCreateArticleCommentMock()),
        )
      }),rest.delete('*/articles/:slug/comments/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),]
